# -*- coding: utf-8 -*-
"""
Created on: 18.06.25 14:36
@author: Dmytro Nikolaenko (nikodim74@gmail.com)
@user: d_nikolaenko
@project name: Python3_dev_courses
@file: homework1.py
"""

"""
Task 1

Make a program that has some sentence (a string) on input and returns a dict containing
all unique words as keys and the number of occurrences as values. 

Task 2
Input data:

stock = {
    "banana": 6,
    "apple": 0,
    "orange": 32,
    "pear": 15
}
prices = {
    "banana": 4,
    "apple": 2,
    "orange": 1.5,
    "pear": 3
}

Compute the total price of the stock where the total price is the sum of the price of
an item multiplied by the quantity of this exact item.

The code has to return the dictionary with the sums of the prices by the goods types.
"""
# –í–≤—ñ–¥ —Ä–µ—á–µ–Ω–Ω—è –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
sentence = input("–í–≤–µ–¥—ñ—Ç—å —Ä–µ—á–µ–Ω–Ω—è: ")

# –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ—á–µ–Ω–Ω—è —É —Å–ø–∏—Å–æ–∫ —Å–ª—ñ–≤ —É –Ω–∏–∂–Ω—å–æ–º—É —Ä–µ–≥—ñ—Å—Ç—Ä—ñ
words = sentence.lower().split()

# –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π —Å–ª–æ–≤–Ω–∏–∫ –¥–ª—è –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Å–ª—ñ–≤
word_count = {}

# –ü—Ä–æ—Ö–æ–¥–∏–º–æ –ø–æ –∫–æ–∂–Ω–æ–º—É —Å–ª–æ–≤—É –∑—ñ —Å–ø–∏—Å–∫—É
for word in words:
    word = word.strip(".,!?\"'")
    if word:
        word_count[word] = word_count.get(word, 0) + 1

# –í–∏–≤–æ–¥–∏–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Å–ª—ñ–≤
print("\n –£–Ω—ñ–∫–∞–ª—å–Ω—ñ —Å–ª–æ–≤–∞ —Ç–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —ó—Ö –≤–∂–∏–≤–∞–Ω—å:")
print(word_count)

# –°–ª–æ–≤–Ω–∏–∫ —ñ–∑ –∫—ñ–ª—å–∫—ñ—Å—Ç—é —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞ —Å–∫–ª–∞–¥—ñ
stock = {
    "banana": 6,
    "apple": 0,
    "orange": 32,
    "pear": 15
}

# –°–ª–æ–≤–Ω–∏–∫ —ñ–∑ —Ü—ñ–Ω–∞–º–∏ –∑–∞ –æ–¥–∏–Ω–∏—Ü—é –∫–æ–∂–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É
prices = {
    "banana": 4,
    "apple": 2,
    "orange": 1.5,
    "pear": 3
}

inventory_value = {}

# –û–±—á–∏—Å–ª—é—î–º–æ —Å—É–º–∞—Ä–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å –∫–æ–∂–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É —è–∫: –∫—ñ–ª—å–∫—ñ—Å—Ç—å * —Ü—ñ–Ω–∞
for item in stock:
    inventory_value[item] = stock[item] * prices.get(item, 0)

# –í–∏–≤–æ–¥–∏–º–æ —Å–ª–æ–≤–Ω–∏–∫ —ñ–∑ –∑–∞–≥–∞–ª—å–Ω–æ—é –≤–∞—Ä—Ç—ñ—Å—Ç—é –∫–æ–∂–Ω–æ–≥–æ —Ç–∏–ø—É —Ç–æ–≤–∞—Ä—É
print("\nüí∞ –ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å –∑–∞ —Ç–∏–ø–∞–º–∏ —Ç–æ–≤–∞—Ä—ñ–≤:")
print(inventory_value)

"""
Task 3
List comprehension exercise
Use a list comprehension to make a list containing tuples (i, j) where 'i' goes from 1 to 10 and
'j' is corresponding to 'i' squared.
"""

my_list = [(i, i**2) for i in range(1, 11)]
print(my_list)

"""
Task 4
–°—Ç–≤–æ—Ä–∏—Ç–∏ –ª–∏—Å—Ç —ñ–∑ –¥–Ω—è–º–∏ —Ç–∏–∂–Ω—è.
–í –æ–¥–∏–Ω —Ä—è–¥–æ–∫ (–Ω—É –∞–±–æ —è–∫ –∑–∞–≤–∂–¥–∏) —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Å–ª–æ–≤–Ω–∏–∫ –≤–∏–¥—É: {1: "Monday", 2:...
–¢–∞–∫–æ–∂ –≤ –æ–¥–∏–Ω —Ä—è–¥–æ–∫ –∞–±–æ —è–∫ –≤–¥–∞—Å—Ç—å—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–≤–æ—Ä–æ—Ç–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫ {"Monday": 1,
"""

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –¥–Ω—ñ–≤ —Ç–∏–∂–Ω—è (–∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é –º–æ–≤–æ—é)
days_of_week = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]
print(f"–°–ø–∏—Å–æ–∫ –¥–Ω—ñ–≤ —Ç–∏–∂–Ω—è: {days_of_week}")

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–ª–æ–≤–Ω–∏–∫–∞ {–Ω–æ–º–µ—Ä: "–î–µ–Ω—å"} –≤ –æ–¥–∏–Ω —Ä—è–¥–æ–∫
# –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ dict comprehension –∑ enumerate, —â–æ–± –ø–æ—á–∞—Ç–∏ –Ω—É–º–µ—Ä–∞—Ü—ñ—é –∑ 1
number_to_day = {i + 1: day for i, day in enumerate(days_of_week)}
print(f"–°–ª–æ–≤–Ω–∏–∫ {number_to_day}: {number_to_day}") # –ó–º—ñ–Ω–µ–Ω–æ 'num_to_day' –Ω–∞ 'number_to_day' –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ –∑–º—ñ–Ω–Ω—ñ–π

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞ {"–î–µ–Ω—å": –Ω–æ–º–µ—Ä} –≤ –æ–¥–∏–Ω —Ä—è–¥–æ–∫
# –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ dict comprehension –¥–ª—è –æ–±–º—ñ–Ω—É –∫–ª—é—á—ñ–≤ —ñ –∑–Ω–∞—á–µ–Ω—å
day_to_number = {day: num for num, day in number_to_day.items()}
print(f"–ó–≤–æ—Ä–æ—Ç–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫ {day_to_number}: {day_to_number}") # –ó–º—ñ–Ω–µ–Ω–æ 'day_to_num' –Ω–∞ 'day_to_number' –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ –∑–º—ñ–Ω–Ω—ñ–π

# –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Å–ª–æ–≤–Ω–∏–∫—ñ–≤:
print(f"\n–î–µ–Ω—å –∑ –Ω–æ–º–µ—Ä–æ–º 3: {number_to_day[3]}")
print(f"–ù–æ–º–µ—Ä –¥–Ω—è 'Saturday': {day_to_number['Saturday']}") # –ó–º—ñ–Ω–µ–Ω–æ '–°—É–±–æ—Ç–∞' –Ω–∞ 'Saturday'
